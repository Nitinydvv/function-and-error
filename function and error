// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SchoolGradingSystem {
    address public owner;
    mapping(address => uint256) public studentGrades;
    uint256 public totalStudents;

    constructor() {
        owner = msg.sender; // Set the contract deployer as the owner
    }

    // Modifier to check if the caller is the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    // Function to assign a grade to a student
    function setStudentGrade(address student, uint256 grade) public onlyOwner {
        require(grade >= 0 && grade <= 100, "Grade must be between 0 and 100");
        if (studentGrades[student] == 0) {
            totalStudents += 1;
        }
        studentGrades[student] = grade;
    }

    // Function to retrieve a student's grade
    function viewStudentGrade(address student) public view returns (uint256) {
        uint256 grade = studentGrades[student];
        require(grade > 0, "No grade assigned to this student");
        return grade;
    }

    // Function to demonstrate assert()
    function verifyTotalStudents() public view returns (string memory) {
        // This assert checks if total students is non-negative
        assert(totalStudents >= 0);
        return "Total students count is non-negative";
    }

    // Function to reset a student's grade using revert()
    function clearStudentGrade(address student) public onlyOwner {
        if (studentGrades[student] == 0) {
            revert("Student grade is already zero or not assigned");
        }
        studentGrades[student] = 0;
        totalStudents -= 1;
    }
}
